require("dotenv").config(); // –ü–æ–¥–∫–ª—é—á–∞–µ–º dotenv
const TelegramBot = require("node-telegram-bot-api");
const fs = require("fs");
const path = require("path");

// ========== 1. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ –∏ —á—Ç–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤ ==========
const token = process.env.BOT_TOKEN;

// –°–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
const bot = new TelegramBot(token, {
  polling: {
    interval: 100,
    autoStart: true,
    params: {
      timeout: 10,
    },
  },
});

// –°—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª reviews.txt (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, —Ç.–∫. –æ–Ω –æ–±—ã—á–Ω–æ –Ω–µ–±–æ–ª—å—à–æ–π)
let reviewsLines = [];
try {
  const reviewsData = fs.readFileSync(
    path.join(__dirname, "reviews.txt"),
    "utf-8"
  );

  // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏, —É–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ
  reviewsLines = reviewsData
    .split("\n")
    .map((line) => line.trim())
    .filter(Boolean);

  // –ó–∞–º–µ–Ω—è–µ–º "\n" –≤–Ω—É—Ç—Ä–∏ —Å—Ç—Ä–æ–∫–∏ –Ω–∞ –Ω–∞—Å—Ç–æ—è—â–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã (–¥–ª—è –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤)
  reviewsLines = reviewsLines.map((line) => line.replace(/\\n/g, "\n"));
} catch (err) {
  console.warn(
    "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª reviews.txt. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –æ—Ç–∑—ã–≤–æ–≤.",
    err
  );
}

// –î–æ–ø—É—Å—Ç–∏–º—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è (—Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ)
const possibleExtensions = [
  ".jpg",
  ".jpeg",
  ".png",
  ".gif",
  ".mp4",
  ".mov",
  ".webp",
];

// –§–æ—Ä–º–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –æ—Ç–∑—ã–≤–æ–≤: [{ text, filePath, type }, ...]
const reviewsArray = [];
for (let i = 0; i < reviewsLines.length; i++) {
  const baseName = String(i + 1);
  let foundFile = null;

  // –ò—â–µ–º —Ñ–∞–π–ª —Å –ª—é–±—ã–º –∏–∑ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
  for (const ext of possibleExtensions) {
    const fullPath = path.join(__dirname, "reviews", baseName + ext);
    if (fs.existsSync(fullPath)) {
      foundFile = fullPath;
      break;
    }
  }

  // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç—É —Å—Ç—Ä–æ–∫—É
  if (!foundFile) continue;

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ
  const extension = path.extname(foundFile).toLowerCase();
  let fileType = "photo";
  if (extension === ".mp4" || extension === ".mov") {
    fileType = "video";
  }

  reviewsArray.push({
    text: reviewsLines[i],
    filePath: foundFile,
    type: fileType,
  });
}

// ========== 2. –õ–æ–≥–∏–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤, —Ç–∞–π–º–µ—Ä–∞, —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è ==========

// –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ–ø—Ä–æ—Å–∞
const STATES = {
  NONE: "none",
  Q1: "question1",
  Q2: "question2",
  Q3: "question3",
};

// userStates: —Ö—Ä–∞–Ω–∏—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –ø–∞–º—è—Ç–∏
// –ö–ª—é—á ‚Äî chatId, –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî –æ–±—ä–µ–∫—Ç —Å–æ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏: {state, reviewIndex, refParam, ...}
const userStates = {};

// --------- –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏/—É–¥–∞–ª–µ–Ω–∏—è ---------

async function safeSendMessage(chatId, text, options = {}) {
  try {
    const msg = await bot.sendMessage(chatId, text, options);
    return msg;
  } catch (err) {
    handleSendError(chatId, err);
    return null; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º null, –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å
  }
}

async function safeDeleteMessage(chatId, messageId) {
  try {
    await bot.deleteMessage(chatId, messageId);
  } catch (err) {
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ (—á–∞—Å—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –∏—Å—Ç–µ–∫–ª–æ –≤—Ä–µ–º—è)
  }
}

async function safeSendPhoto(chatId, filePath, options = {}) {
  try {
    const msg = await bot.sendPhoto(chatId, filePath, options);
    return msg;
  } catch (err) {
    handleSendError(chatId, err);
    return null;
  }
}

async function safeSendVideo(chatId, filePath, options = {}) {
  try {
    const msg = await bot.sendVideo(chatId, filePath, options);
    return msg;
  } catch (err) {
    handleSendError(chatId, err);
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏
function handleSendError(chatId, err) {
  if (
    err.response &&
    err.response.body &&
    err.response.body.error_code === 403
  ) {
    console.log(
      `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å chatId=${chatId} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.`
    );
  } else {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", err);
  }
}

// ========== –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ==========

// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª—é–±—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
bot.on("message", async (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text || "";

  // 1) –û—Ç–ª–∞–≤–ª–∏–≤–∞–µ–º /start (—Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –∏–ª–∏ –±–µ–∑)
  // –ù–∞–ø—Ä–∏–º–µ—Ä: /start 451325435
  if (text.startsWith("/start")) {
    // –†–∞–∑–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
    const parts = text.split(" ");
    let startParam = null;
    if (parts.length > 1) {
      // –¢–æ, —á—Ç–æ –∏–¥—ë—Ç –ø–æ—Å–ª–µ /start
      startParam = parts[1];
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –Ω–µ—Ç
    if (!userStates[chatId]) {
      userStates[chatId] = { state: STATES.NONE, reviewIndex: 0 };
    }
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –≤ userStates
    userStates[chatId].refParam = startParam || null;

    // –î–∞–ª—å—à–µ –æ–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ /start
    const userName = msg.from.first_name || msg.from.username || "–î—Ä—É–∑—å—è";

    const finalImagePath = path.join(__dirname, "photo", "1.webp");


    await safeSendPhoto(chatId, finalImagePath, {
      caption:
        `${userName}, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º üëã\n\n` +
        `üß† –ú—ã –ø–æ–¥–±–µ—Ä—ë–º –¥–ª—è –≤–∞—Å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∑–∞—Ä–∞–±–æ—Ç–∫–∞, –∏—Å—Ö–æ–¥—è –∏–∑ –≤–∞—à–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤.\n` +
        `–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ 3 –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–∞ ‚Äî –∏ —É–∑–Ω–∞–π—Ç–µ, —Å–∫–æ–ª—å–∫–æ —Å–º–æ–∂–µ—Ç–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å!\n\n` +
        `‚úÖ –£ –Ω–∞—Å —É–∂–µ –µ—Å—Ç—å –≥–æ—Ç–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥–∏–∫–∏ –ø–æ–¥ –ª—é–±–æ–π –±—é–¥–∂–µ—Ç\n` +
        `üíº –° –Ω–∞–º–∏ —É–∂–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç —Å–æ—Ç–Ω–∏ –ª—é–¥–µ–π –µ–∂–µ–¥–Ω–µ–≤–Ω–æ!`,
      reply_markup: {
        inline_keyboard: [
          [{ text: "–ü–æ–¥–æ–±—Ä–∞—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é", callback_data: "get_money" }],
        ],
      },
    });
    return;
  }

  // 2) –ö–Ω–æ–ø–∫–∞ ¬´–û—Ç–∑—ã–≤—ã¬ª
  if (text === "–û—Ç–∑—ã–≤—ã") {
    sendNextReview(chatId);
    return;
  }

  // 3) –ö–Ω–æ–ø–∫–∞ ¬´–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å¬ª
  if (text === "–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å") {
    const userRef = userStates[chatId]?.refParam
      ? userStates[chatId].refParam
      : "organic";
    const finalLink = `https://onesecgo.ru/stream/8kact?cid=${userRef}`;

    const finalImagePath = path.join(__dirname, "photo", "2.webp");

    await safeSendPhoto(chatId, finalImagePath, {
      caption:
        "üìù –ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:\n\n" +
        "1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç: –ü–ï–†–ï–ô–¢–ò –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ\n" +
        "2. –û–ø–ª–∞—Ç–∏—Ç–µ 1‚ÇΩ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–∞–∫–µ—Ç–∞ –ø–æ –∑–∞—Ä–∞–±–æ—Ç–∫—É –Ω–∞ 5–¥–Ω\n" +
        "3. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ üí∏\n\n" +
        "‚è≥ –í–∞–∂–Ω–æ: –¥–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –ø–æ –≤—Ä–µ–º–µ–Ω–∏!",
      reply_markup: {
        inline_keyboard: [[{ text: "–ü–µ—Ä–µ–π—Ç–∏", url: finalLink }]],
      },
    });
    return;
  }
});

// ========== –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ ==========
bot.on("callback_query", async (query) => {
  const chatId = query.message.chat.id;
  const data = query.data;

  // --- –ù–∞–∂–∞–ª–∏ ¬´–ü–æ–ª—É—á–∏—Ç—å –¥–µ–Ω—å–≥–∏¬ª ---
  if (data === "get_money") {
    // –£–¥–∞–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await safeDeleteMessage(chatId, query.message.message_id);

    // –ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ä–æ—Å
    if (!userStates[chatId]) {
      userStates[chatId] = {};
    }
    userStates[chatId].state = STATES.Q1;
    userStates[chatId].reviewIndex = userStates[chatId].reviewIndex || 0;

    // –ó–∞–¥–∞—ë–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
    const qMsg = await safeSendMessage(chatId, "–ö–∞–∫–æ–π —É –≤–∞—Å —Ç–µ–ª–µ—Ñ–æ–Ω?", {
      reply_markup: {
        inline_keyboard: [
          [
            { text: "Iphone", callback_data: "q1_Iphone" },
            { text: "Android", callback_data: "q1_Android" },
          ],
        ],
      },
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º id –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º —É–¥–∞–ª–∏—Ç—å
    if (qMsg && qMsg.message_id) {
      userStates[chatId].lastQuestionMsgId = qMsg.message_id;
    }

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ
    await bot.answerCallbackQuery(query.id).catch(() => {});
    return;
  }

  // --- –í–æ–ø—Ä–æ—Å 1 (Q1) ---
  if (data.startsWith("q1_") && userStates[chatId]?.state === STATES.Q1) {
    userStates[chatId].phone = data.replace("q1_", "");
    userStates[chatId].state = STATES.Q2;

    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å
    if (userStates[chatId].lastQuestionMsgId) {
      await safeDeleteMessage(chatId, userStates[chatId].lastQuestionMsgId);
    }

    // –ó–∞–¥–∞—ë–º –≤—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å
    const qMsg = await safeSendMessage(chatId, "–°–∫–æ–ª—å–∫–æ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å?", {
      reply_markup: {
        inline_keyboard: [
          [
            { text: "30 –º–∏–Ω—É—Ç –≤ –¥–µ–Ω—å", callback_data: "q2_30min" },
            { text: "1 —á–∞—Å –≤ –¥–µ–Ω—å", callback_data: "q2_1h" },
          ],
          [
            { text: "3 —á–∞—Å–∞ –≤ –¥–µ–Ω—å", callback_data: "q2_3h" },
            { text: "5 —á–∞—Å–æ–≤ –≤ –¥–µ–Ω—å", callback_data: "q2_5h" },
          ],
        ],
      },
    });
    if (qMsg && qMsg.message_id) {
      userStates[chatId].lastQuestionMsgId = qMsg.message_id;
    }

    await bot.answerCallbackQuery(query.id).catch(() => {});
    return;
  }

  // --- –í–æ–ø—Ä–æ—Å 2 (Q2) ---
  if (data.startsWith("q2_") && userStates[chatId]?.state === STATES.Q2) {
    const mapping = {
      q2_30min: "30 –º–∏–Ω—É—Ç –≤ –¥–µ–Ω—å",
      q2_1h: "1 —á–∞—Å –≤ –¥–µ–Ω—å",
      q2_3h: "3 —á–∞—Å–∞ –≤ –¥–µ–Ω—å",
      q2_5h: "5 —á–∞—Å–æ–≤ –≤ –¥–µ–Ω—å",
    };
    userStates[chatId].workTime = mapping[data];
    userStates[chatId].state = STATES.Q3;

    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å
    if (userStates[chatId].lastQuestionMsgId) {
      await safeDeleteMessage(chatId, userStates[chatId].lastQuestionMsgId);
    }

    // –¢—Ä–µ—Ç–∏–π –≤–æ–ø—Ä–æ—Å
    const qMsg = await safeSendMessage(chatId, "–°–∫–æ–ª—å–∫–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å?", {
      reply_markup: {
        inline_keyboard: [
          [
            { text: "50 —Ç.—Ä. –≤ –º–µ—Å—è—Ü", callback_data: "q3_50k" },
            { text: "70 —Ç.—Ä. –≤ –º–µ—Å—è—Ü", callback_data: "q3_70k" },
          ],
          [
            { text: "120 —Ç.—Ä. –≤ –º–µ—Å—è—Ü", callback_data: "q3_120k" },
            { text: "300 —Ç.—Ä. –≤ –º–µ—Å—è—Ü", callback_data: "q3_300k" },
          ],
        ],
      },
    });
    if (qMsg && qMsg.message_id) {
      userStates[chatId].lastQuestionMsgId = qMsg.message_id;
    }

    await bot.answerCallbackQuery(query.id).catch(() => {});
    return;
  }

  // --- –í–æ–ø—Ä–æ—Å 3 (Q3) ---
  if (data.startsWith("q3_") && userStates[chatId]?.state === STATES.Q3) {
    const mapping = {
      q3_50k: "50 —Ç.—Ä. –≤ –º–µ—Å—è—Ü",
      q3_70k: "70 —Ç.—Ä. –≤ –º–µ—Å—è—Ü",
      q3_120k: "120 —Ç.—Ä. –≤ –º–µ—Å—è—Ü",
      q3_300k: "300 —Ç.—Ä. –≤ –º–µ—Å—è—Ü",
    };
    userStates[chatId].income = mapping[data];
    userStates[chatId].state = STATES.NONE;

    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å
    if (userStates[chatId].lastQuestionMsgId) {
      await safeDeleteMessage(chatId, userStates[chatId].lastQuestionMsgId);
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º ¬´—Ç–∞–π–º–µ—Ä¬ª
    startTimerSequence(chatId);

    await bot.answerCallbackQuery(query.id).catch(() => {});
    return;
  }
});

// ========== –§—É–Ω–∫—Ü–∏—è ¬´—Ç–∞–π–º–µ—Ä¬ª (–∏–º–∏—Ç–∞—Ü–∏—è —Ä–∞—Å—á—ë—Ç–æ–≤/–æ–∂–∏–¥–∞–Ω–∏—è) ==========
function startTimerSequence(chatId) {
  const messages = [
    "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å‚Ä¶",
    "–ò–∑—É—á–∞–µ–º –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã‚Ä¶",
    "–ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é‚Ä¶",
    "–ò–¥—ë—Ç –ø–æ–¥–±–æ—Ä –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è‚Ä¶",
    "–°–≤–µ—Ä—è–µ–º —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏‚Ä¶",
    "–§–æ—Ä–º–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç‚Ä¶",
    "–ì–æ—Ç–æ–≤–æ ‚úÖ",
  ];

  let index = 0;
  let lastMessageId = null;

  function showNextMessage() {
    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–µ—Å–ª–∏ –±—ã–ª–æ)
    if (lastMessageId) {
      safeDeleteMessage(chatId, lastMessageId);
    }

    // –ï—Å–ª–∏ –≤—Å–µ —ç—Ç–∞–ø—ã —Ç–∞–π–º–µ—Ä–∞ –ø—Ä–æ–π–¥–µ–Ω—ã
    if (index >= messages.length) {
      // 1) –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      const userRef = userStates[chatId]?.refParam || "organic";
      const finalLink = `https://onesecgo.ru/stream/8kact?cid=${userRef}`;

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      sendFinalMessages(chatId, finalLink).catch((err) =>
        console.error("–û—à–∏–±–∫–∞ –≤ sendFinalMessages:", err)
      );

      return; // –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º —Ü–µ–ø–æ—á–∫—É
    }

    // –ò–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—á–µ—Ä–µ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    safeSendMessage(chatId, messages[index]).then((sentMsg) => {
      if (sentMsg) {
        lastMessageId = sentMsg.message_id;
      }
      index++;
      // –í—ã–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
      setTimeout(showNextMessage, 2000);
    });
  }

  // –ó–∞–ø—É—Å–∫–∞–µ–º —Ü–µ–ø–æ—á–∫—É
  showNextMessage();
}

// –û—Ç–¥–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async function sendFinalMessages(chatId, finalLink) {
  await safeSendMessage(
    chatId,
    "üéâ –û—Ç–ª–∏—á–Ω–æ! –ú—ã –ø–æ–¥–æ–±—Ä–∞–ª–∏ –¥–ª—è –≤–∞—Å –ø–æ–¥—Ö–æ–¥—è—â—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é.\n\n" +
      "üí∞ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥: 8000‚ÇΩ –≤ –¥–µ–Ω—å",
    {
      parse_mode: "Markdown",
      reply_markup: {
        keyboard: [["–û—Ç–∑—ã–≤—ã", "–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å"]],
        resize_keyboard: true,
      },
    }
  );

  const finalImagePath = path.join(__dirname, "photo", "2.webp");

  await safeSendPhoto(chatId, finalImagePath, {
    caption:
      "üìù –ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:\n\n" +
      "1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç: –ü–ï–†–ï–ô–¢–ò –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ\n" +
      "2. –û–ø–ª–∞—Ç–∏—Ç–µ 1‚ÇΩ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–∞–∫–µ—Ç–∞ –ø–æ –∑–∞—Ä–∞–±–æ—Ç–∫—É –Ω–∞ 5–¥–Ω\n" +
      "3. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ üí∏\n\n" +
      "‚è≥ –í–∞–∂–Ω–æ: –¥–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –ø–æ –≤—Ä–µ–º–µ–Ω–∏!",
    reply_markup: {
      inline_keyboard: [[{ text: "–ü–µ—Ä–µ–π—Ç–∏", url: finalLink }]],
    },
  });
  return;
}

// ========== –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –û—Ç–∑—ã–≤–æ–≤ (–ø–æ –∫—Ä—É–≥—É) ==========
async function sendNextReview(chatId) {
  // –ï—Å–ª–∏ –≤–¥—Ä—É–≥ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤
  if (!reviewsArray.length) {
    await safeSendMessage(chatId, "–ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤");
    return;
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º userStates[chatId], –µ—Å–ª–∏ –Ω–µ—Ç
  if (!userStates[chatId]) {
    userStates[chatId] = { state: STATES.NONE, reviewIndex: 0 };
  }

  // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –µ—Å—Ç—å –ø–æ–ª–µ reviewIndex
  if (typeof userStates[chatId].reviewIndex !== "number") {
    userStates[chatId].reviewIndex = 0;
  }

  // –ë–µ—Ä—ë–º –æ—Ç–∑—ã–≤ –ø–æ –∏–Ω–¥–µ–∫—Å—É
  const { text, filePath, type } = reviewsArray[userStates[chatId].reviewIndex];

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ
  if (type === "photo") {
    await safeSendPhoto(chatId, filePath, { caption: text });
  } else {
    // type === "video"
    await safeSendVideo(chatId, filePath, { caption: text });
  }

  // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å
  userStates[chatId].reviewIndex += 1;

  // –ï—Å–ª–∏ –¥–æ—à–ª–∏ –¥–æ –∫–æ–Ω—Ü–∞ –º–∞—Å—Å–∏–≤–∞ ‚Äî –Ω–∞—á–∏–Ω–∞–µ–º —Å –Ω–∞—á–∞–ª–∞
  if (userStates[chatId].reviewIndex >= reviewsArray.length) {
    userStates[chatId].reviewIndex = 0;
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
console.log("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...");
