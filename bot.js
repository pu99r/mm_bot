require("dotenv").config(); // –ü–æ–¥–∫–ª—é—á–∞–µ–º dotenv
const TelegramBot = require("node-telegram-bot-api");
const mongoose = require("mongoose");
const express = require("express");
const fs = require("fs");
const path = require("path");

const {
  BOT_TOKEN,
  MONGODB_HOST,
  MONGODB_PORT,
  MONGODB_USERNAME,
  MONGODB_PASSWORD,
  MONGODB_DBNAME,
} = process.env;

const passwordEncoded = encodeURIComponent(MONGODB_PASSWORD);

// –î–æ–±–∞–≤–ª—è–µ–º &directConnection=true
const mongoUri =
  `mongodb://${MONGODB_USERNAME}:${passwordEncoded}` +
  `@${MONGODB_HOST}:${MONGODB_PORT}/${MONGODB_DBNAME}?authSource=admin&directConnection=true`;

console.log("BOT_TOKEN:", BOT_TOKEN);
console.log("MONGODB_HOST:", MONGODB_HOST);
console.log("MONGODB_USERNAME:", MONGODB_USERNAME);
console.log("MONGODB_PASSWORD:", MONGODB_PASSWORD);
console.log("MONGODB_DBNAME:", MONGODB_DBNAME);

// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ MongoDB —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º–∏ —Ç–∞–π–º–∞—É—Ç–∞–º–∏
mongoose
  .connect(mongoUri, {
    connectTimeoutMS: 30000,
    socketTimeoutMS: 30000,
  })
  .then(() => console.log("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB"))
  .catch((err) => console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:", err));

// ==========================
//  Schema & Model
// ==========================
const userSchema = new mongoose.Schema({
  telegramId: { type: Number, unique: true, required: true },
  username: { type: String, required: true },
  click_id: { type: String, default: "none" }, // —á–∏—Å—Ç—ã–π CID –±–µ–∑ —Å—É—Ñ—Ñ–∏–∫—Å–∞
  link: { type: String, required: true }, // –∏—Ç–æ–≥–æ–≤–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ—Ñ—Ñ–µ—Ä
  complete: { type: [String], default: [] },
  status: {
    type: String,
    enum: ["mes", "reg", "dep"],
    default: "mes",
  },
});

const User = mongoose.model("User", userSchema);

// ==========================
//  HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
// ==========================
const app = express();

//  GET /setStatus?telegramId=123456789&status=reg
app.get("/setStatus", async (req, res) => {
  const { telegramId, status } = req.query;

  // –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  if (!telegramId || !status)
    return res
      .status(400)
      .json({ error: "telegramId and status are required" });
  if (!["mes", "reg", "dep"].includes(status))
    return res.status(400).json({ error: "status must be mes, reg or sale" });

  try {
    const user = await User.findOneAndUpdate(
      { telegramId: Number(telegramId) },
      { $set: { status } },
      { new: true } // –≤–µ—Ä–Ω—É—Ç—å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
    );

    if (!user)
      return res
        .status(404)
        .json({ error: `User with telegramId ${telegramId} not found` });

    res.json({ success: true, user });
  } catch (err) {
    console.error("Error updating status:", err);
    res.status(500).json({ error: "Internal server error" });
  }
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () =>
  console.log(`üåê Status API is listening on port ${PORT}`)
);

// ==========================
//  Bot init
// ==========================
const bot = new TelegramBot(BOT_TOKEN, {
  polling: {
    interval: 100,
    autoStart: true,
    params: { timeout: 10 },
  },
});

const ADMIN_ID = 1370034279;

// ---------- –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª —Å –æ—Ç–∑—ã–≤–∞–º–∏ ----------
let reviewsLines = [];
try {
  const reviewsData = fs.readFileSync(
    path.join(__dirname, "reviews.txt"),
    "utf-8"
  );
  reviewsLines = reviewsData
    .split("\n")
    .map((l) => l.trim())
    .filter(Boolean)
    .map((l) => l.replace(/\\n/g, "\n"));
} catch (err) {
  console.warn(
    "–§–∞–π–ª reviews.txt –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –æ—Ç–∑—ã–≤–æ–≤",
    err
  );
}

const possibleExtensions = [
  ".jpg",
  ".jpeg",
  ".png",
  ".gif",
  ".mp4",
  ".mov",
  ".webp",
];
const reviewsArray = [];
reviewsLines.forEach((text, idx) => {
  const base = String(idx + 1);
  const file = possibleExtensions.find((ext) =>
    fs.existsSync(path.join(__dirname, "reviews", base + ext))
  );
  if (!file) return;
  const filePath = path.join(__dirname, "reviews", base + file);
  const type = [".mp4", ".mov"].includes(file) ? "video" : "photo";
  reviewsArray.push({ text, filePath, type });
});

// ========== –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π –æ–ø—Ä–æ—Å–∞ ==========
const STATES = { NONE: "none", Q1: "q1", Q2: "q2", Q3: "q3" };
const userStates = {}; // —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –≤ –ø–∞–º—è—Ç–∏

// --------------------------------------------------
//  –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ helpers –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É / —É–¥–∞–ª–µ–Ω–∏–µ
// --------------------------------------------------
const safeSendMessage = async (id, text, opts = {}) => {
  try {
    return await bot.sendMessage(id, text, opts);
  } catch (err) {
    if (err.response?.body?.error_code === 403) {
      console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.`);
    } else console.error("–û—à–∏–±–∫–∞ sendMessage:", err);
    return null;
  }
};

const safeDeleteMessage = async (id, mid) => {
  try {
    await bot.deleteMessage(id, mid);
  } catch (_) {}
};

const safeSendPhoto = async (id, filePath, opts = {}) => {
  try {
    return await bot.sendPhoto(id, fs.createReadStream(filePath), opts);
  } catch (err) {
    console.error("sendPhoto", err);
    return null;
  }
};
const safeSendVideo = async (id, filePath, opts = {}) => {
  try {
    return await bot.sendVideo(id, filePath, opts);
  } catch (err) {
    console.error("sendVideo", err);
    return null;
  }
};

// ==========================
//  –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
// ==========================
bot.on("message", async (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text || "";

  if (msg.from.id === ADMIN_ID && msg.text === "mes+") {
    await safeSendMessage(ADMIN_ID, "üì£ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!");

    const users = await User.find(
      { status: { $in: ["mes", "reg"] } }, // dep –∏—Å–∫–ª—é—á–∞–µ–º
      { telegramId: 1, username: 1, status: 1, link: 1 }
    ).lean();

    for (const u of users) {
      const caption =
        u.status === "mes"
          ? "üî• –û—Å—Ç–∞–ª—Å—è –æ–¥–∏–Ω —à–∞–≥!\n–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å–µ–π—á–∞—Å –∏ –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –ø–æ—à–∞–≥–æ–≤–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∑–∞—Ä–∞–±–æ—Ç–∫—É."
          : "üöÄ –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –≤—Å–µ–≥–æ –∑–∞ 1 ‚ÇΩ –∏ –Ω–∞—á–Ω–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –ø—Ä–∏–±—ã–ª—å —É–∂–µ —Å–µ–≥–æ–¥–Ω—è!";

      await safeSendPhoto(
        u.telegramId,
        path.join(__dirname, "photo", "2.webp"),
        {
          caption,
          reply_markup: {
            inline_keyboard: [[{ text: "–ü–µ—Ä–µ–π—Ç–∏", url: u.link }]],
          },
        }
      ).catch(() => {}); // –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ 403/400

      // –ª—ë–≥–∫–∞—è –ø–∞—É–∑–∞, —á—Ç–æ–±—ã –Ω–µ —É–ø–µ—Ä–µ—Ç—å—Å—è –≤ –ª–∏–º–∏—Ç 30 msg/—Å–µ–∫
      await new Promise((r) => setTimeout(r, 35));
    }

    await safeSendMessage(ADMIN_ID, "‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
    return;
  }

  // ----------------------
  //  /start <param>
  // ----------------------
  if (text.startsWith("/start")) {
    const [_, rawParam] = text.split(" ");

    // üëâ –ë–µ—Ä—ë–º CID –î–û —Å–∏–º–≤–æ–ª–∞ ¬´_¬ª
    const baseCid = rawParam ? rawParam.split("_")[0] : "none";

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –ø–æ —É—Å–ª–æ–≤–∏—è–º
    const sub1 = `&sub1=${userDoc.telegramId}`;
    let generatedLink;
    if (rawParam?.endsWith("_al2")) {
      generatedLink = `https://justonesec.ru/stream/cprumod249ak?cid=${baseCid}${sub1}`;
    } else if (rawParam?.endsWith("_al")) {
      generatedLink = `https://onesecgo.ru/stream/gamesportg?cid=${baseCid}${sub1}`;
    } else {
      generatedLink = `https://onesecgo.ru/stream/8kact?cid=${baseCid}${sub1}`;
    }

    // username fallback
    const username =
      msg.from.username ||
      `${msg.from.first_name || "user"}${msg.from.last_name || ""}`;

    // –°–æ–∑–¥–∞—ë–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let userDoc = await User.findOne({ telegramId: chatId });
    if (!userDoc) {
      userDoc = new User({
        telegramId: chatId,
        username,
        click_id: baseCid,
        link: generatedLink,
      });
    } else {
      userDoc.username = username;
      userDoc.click_id = baseCid;
      userDoc.link = generatedLink;
    }
    await userDoc.save();

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞–º—è—Ç—å
    userStates[chatId] = { state: STATES.NONE, reviewIndex: 0 };

    // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    const name = msg.from.first_name || msg.from.username || "–î—Ä—É–∑—å—è";
    await safeSendPhoto(chatId, path.join(__dirname, "photo", "1.webp"), {
      caption:
        `${name}, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º üëã\n\n` +
        `üß† –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ 3 –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–∞, –∏ –º—ã –ø–æ–¥–±–µ—Ä—ë–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∑–∞—Ä–∞–±–æ—Ç–∫–∞.\n\n` +
        `‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥–∏–∫–∏ –ø–æ–¥ –ª—é–±–æ–π –±—é–¥–∂–µ—Ç\n` +
        `üíº –£–∂–µ —Å–æ—Ç–Ω–∏ –ª—é–¥–µ–π –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ!`,
      reply_markup: {
        inline_keyboard: [
          [{ text: "–ü–æ–¥–æ–±—Ä–∞—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é", callback_data: "get_money" }],
        ],
      },
    });
    return;
  }

  // ----------------------
  //  ¬´–û—Ç–∑—ã–≤—ã¬ª
  // ----------------------
  if (text === "–û—Ç–∑—ã–≤—ã") {
    sendNextReview(chatId);
    return;
  }

  // ----------------------
  //  ¬´–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å¬ª
  // ----------------------
  if (text === "–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å") {
    const userDoc = await User.findOne({ telegramId: chatId });
    const finalLink =
      userDoc?.link ||
      `https://onesecgo.ru/stream/8kact?cid=${userDoc?.click_id || "none"}`;

    await safeSendPhoto(chatId, path.join(__dirname, "photo", "2.webp"), {
      caption:
        "üìù –ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:\n\n" +
        "1. –ù–∞–∂–º–∏—Ç–µ ¬´–ü–µ—Ä–µ–π—Ç–∏¬ª –Ω–∏–∂–µ\n" +
        "2. –û–ø–ª–∞—Ç–∏—Ç–µ 1‚ÇΩ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–∞–∫–µ—Ç–∞ (5 –¥–Ω–µ–π)\n" +
        "3. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ üí∏\n\n" +
        "‚è≥ –í–∞–∂–Ω–æ: –¥–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –ø–æ –≤—Ä–µ–º–µ–Ω–∏!",
      reply_markup: {
        inline_keyboard: [[{ text: "–ü–µ—Ä–µ–π—Ç–∏", url: finalLink }]],
      },
    });
    return;
  }
});

// ==========================
//  –û–±—Ä–∞–±–æ—Ç–∫–∞ callback_query
// ==========================
bot.on("callback_query", async (query) => {
  const chatId = query.message.chat.id;
  const data = query.data;

  // --- start quiz ---
  if (data === "get_money") {
    await safeDeleteMessage(chatId, query.message.message_id);
    userStates[chatId] = { ...userStates[chatId], state: STATES.Q1 };

    const q = await safeSendMessage(chatId, "–ö–∞–∫–æ–π —É –≤–∞—Å —Ç–µ–ª–µ—Ñ–æ–Ω?", {
      reply_markup: {
        inline_keyboard: [
          [
            { text: "iPhone", callback_data: "q1_iphone" },
            { text: "Android", callback_data: "q1_android" },
          ],
        ],
      },
    });
    if (q) userStates[chatId].last = q.message_id;
    await bot.answerCallbackQuery(query.id).catch(() => {});
    return;
  }

  // --- Q1 ---
  if (data.startsWith("q1_") && userStates[chatId]?.state === STATES.Q1) {
    userStates[chatId].phone = data.replace("q1_", "");
    userStates[chatId].state = STATES.Q2;
    if (userStates[chatId].last)
      await safeDeleteMessage(chatId, userStates[chatId].last);

    const q = await safeSendMessage(chatId, "–°–∫–æ–ª—å–∫–æ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å?", {
      reply_markup: {
        inline_keyboard: [
          [
            { text: "30 –º–∏–Ω/–¥–µ–Ω—å", callback_data: "q2_30" },
            { text: "1 —á–∞—Å/–¥–µ–Ω—å", callback_data: "q2_60" },
          ],
          [
            { text: "3 —á–∞—Å–∞/–¥–µ–Ω—å", callback_data: "q2_180" },
            { text: "5 —á–∞—Å–æ–≤/–¥–µ–Ω—å", callback_data: "q2_300" },
          ],
        ],
      },
    });
    if (q) userStates[chatId].last = q.message_id;
    await bot.answerCallbackQuery(query.id).catch(() => {});
    return;
  }

  // --- Q2 ---
  if (data.startsWith("q2_") && userStates[chatId]?.state === STATES.Q2) {
    const map = {
      q2_30: "30 –º–∏–Ω—É—Ç",
      q2_60: "1 —á–∞—Å",
      q2_180: "3 —á–∞—Å–∞",
      q2_300: "5 —á–∞—Å–æ–≤",
    };
    userStates[chatId].work = map[data];
    userStates[chatId].state = STATES.Q3;
    if (userStates[chatId].last)
      await safeDeleteMessage(chatId, userStates[chatId].last);

    const q = await safeSendMessage(chatId, "–°–∫–æ–ª—å–∫–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å?", {
      reply_markup: {
        inline_keyboard: [
          [
            { text: "50k", callback_data: "q3_50" },
            { text: "70k", callback_data: "q3_70" },
          ],
          [
            { text: "120k", callback_data: "q3_120" },
            { text: "300k", callback_data: "q3_300" },
          ],
        ],
      },
    });
    if (q) userStates[chatId].last = q.message_id;
    await bot.answerCallbackQuery(query.id).catch(() => {});
    return;
  }

  // --- Q3 ---
  if (data.startsWith("q3_") && userStates[chatId]?.state === STATES.Q3) {
    const map = { q3_50: "50k", q3_70: "70k", q3_120: "120k", q3_300: "300k" };
    userStates[chatId].income = map[data];
    userStates[chatId].state = STATES.NONE;
    if (userStates[chatId].last)
      await safeDeleteMessage(chatId, userStates[chatId].last);

    launchTimer(chatId);
    await bot.answerCallbackQuery(query.id).catch(() => {});
    return;
  }
});

// ==========================
//  –¢–∞–π–º–µ—Ä (–≤–∏–∑—É–∞–ª—å–Ω–∞—è –∏–º–∏—Ç–∞—Ü–∏—è)
// ==========================
function launchTimer(chatId) {
  const steps = [
    "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å‚Ä¶",
    "–ò–∑—É—á–∞–µ–º –æ—Ç–≤–µ—Ç—ã‚Ä¶",
    "–ü–æ–¥–±–∏—Ä–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é‚Ä¶",
    "–§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç‚Ä¶",
    "–ì–æ—Ç–æ–≤–æ ‚úÖ",
  ];

  let idx = 0;
  let mid = null;

  const next = () => {
    if (mid) safeDeleteMessage(chatId, mid);
    if (idx === steps.length) return sendFinal(chatId);
    safeSendMessage(chatId, steps[idx++]).then((m) => {
      mid = m?.message_id;
      setTimeout(next, 1800);
    });
  };
  next();
}

// ==========================
//  –§–∏–Ω–∞–ª
// ==========================
async function sendFinal(chatId) {
  const userDoc = await User.findOne({ telegramId: chatId });
  const url =
    userDoc?.link ||
    `https://onesecgo.ru/stream/8kact?cid=${userDoc?.click_id || "none"}`;

  await safeSendMessage(
    chatId,
    "üéâ –°—Ç—Ä–∞—Ç–µ–≥–∏—è –≥–æ—Ç–æ–≤–∞!\n\nüí∞ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥: 8000‚ÇΩ/–¥–µ–Ω—å",
    {
      reply_markup: {
        keyboard: [["–û—Ç–∑—ã–≤—ã", "–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å"]],
        resize_keyboard: true,
      },
    }
  );

  await safeSendPhoto(chatId, path.join(__dirname, "photo", "2.webp"), {
    caption:
      "üìù –í–∞—à–∏ —à–∞–≥–∏:\n1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ\n2. –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –ø–∞–∫–µ—Ç –∑–∞ 1‚ÇΩ\n3. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –ø—Ä–∏–±—ã–ª—å!",
    reply_markup: { inline_keyboard: [[{ text: "–ü–µ—Ä–µ–π—Ç–∏", url }]] },
  });
}

// ==========================
//  –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–∑—ã–≤–æ–≤
// ==========================
async function sendNextReview(chatId) {
  if (!reviewsArray.length) return safeSendMessage(chatId, "–ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤");
  const st = (userStates[chatId] ||= { state: STATES.NONE, reviewIndex: 0 });
  const { text, filePath, type } = reviewsArray[st.reviewIndex];
  if (type === "photo")
    await safeSendPhoto(chatId, filePath, { caption: text });
  else await safeSendVideo(chatId, filePath, { caption: text });
  st.reviewIndex = (st.reviewIndex + 1) % reviewsArray.length;
}

console.log("ü§ñ Bot started...");
